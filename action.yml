name: Dynamic Shell
description: Dynamically resolve and use custom Shell.
author: Takashi Kato
inputs:
  shell:
    description: Custom shell command, e.g. `bash`
    required: true
  run:
    description: Shell command string
    required: true
outputs:
  outputs:
    description: Shell execution output.
    value: ${{ steps.exec.outputs.outputs }}
runs:
  using: composite
  steps:
    - name: Indent
      id: indent
      shell: bash
      run: |
        input=$DYNAMIC_SHELL_ENV_INPUT
        lines=()
        while IFS='' read -r value; do
          lines+=("$value")
        done <<-EOF
         $(printf "$input")
        EOF

        output=""
        for i in "${!lines[@]}"; do
          indent=""
          for j in {0..8}; do
            indent="$indent "
          fi
          line="${lines[i]}"
          output="$output\n$indent${line//\"/\\\"}"
        done

        echo "lines=$output">> $GITHUB_OUTPUT
      env:
        DYNAMIC_SHELL_ENV_INPUT: "${{ toJSON(inputs.run) }}"
    - name: Setup
      shell: bash
      run: |
        mkdir -p ./.tmp-dynamic-shell &&
        cat <<'DYNAMIC_SHELL_EOF' > ./.tmp-dynamic-shell/action.yml
        outputs:
          outputs:
            value: ${{ '$' }}{{ toJSON(steps.exec.outputs) }}
        runs:
          using: composite
          steps:
            - run: rm -rf ./.tmp-dynamic-shell
              shell: sh
            - name: Exec
              id: exec
              shell: ${{ inputs.shell }}
              run: |
                $DYNAMIC_SHELL_ENV_INPUT
        DYNAMIC_SHELL_EOF
      env:
        DYNAMIC_SHELL_ENV_INPUT: "${{ steps.indent.outputs.lines }}"
    - name: Exec
      id: exec
      uses: ./.tmp-dynamic-shell
    - name: Cleanup
      if: always() && steps.exec.outcome != 'success'
      shell: bash
      run: rm -rf ./.tmp-dynamic-shell
